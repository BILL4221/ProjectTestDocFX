{
  "api/Runnex.Classifier.html": {
    "href": "api/Runnex.Classifier.html",
    "title": "Namespace Runnex.Classifier | Example Unity documentation",
    "keywords": "Namespace Runnex.Classifier Classes TextureScaler"
  },
  "api/Runnex.Classifier.TextureScaler.html": {
    "href": "api/Runnex.Classifier.TextureScaler.html",
    "title": "Class TextureScaler | Example Unity documentation",
    "keywords": "Class TextureScaler Inheritance Object TextureScaler Namespace : Runnex.Classifier Assembly : cs.temp.dll.dll Syntax public class TextureScaler Methods scale(Texture2D, Int32, Int32, FilterMode) Declaration public static void scale(Texture2D tex, int width, int height, FilterMode mode = null) Parameters Type Name Description Texture2D tex Int32 width Int32 height FilterMode mode scaled(Texture2D, Int32, Int32, FilterMode) Declaration public static Texture2D scaled(Texture2D src, int width, int height, FilterMode mode = null) Parameters Type Name Description Texture2D src Int32 width Int32 height FilterMode mode Returns Type Description Texture2D"
  },
  "api/Runnex.Utilities.AutoGetAttribute.html": {
    "href": "api/Runnex.Utilities.AutoGetAttribute.html",
    "title": "Class AutoGetAttribute | Example Unity documentation",
    "keywords": "Class AutoGetAttribute Inheritance Object Attribute AutoGetAttribute Namespace : Runnex.Utilities Assembly : cs.temp.dll.dll Syntax [AttributeUsage(AttributeTargets.Field)] public class AutoGetAttribute : Attribute, _Attribute"
  },
  "api/Runnex.Utilities.AutoGetMonoBehaviour.html": {
    "href": "api/Runnex.Utilities.AutoGetMonoBehaviour.html",
    "title": "Class AutoGetMonoBehaviour | Example Unity documentation",
    "keywords": "Class AutoGetMonoBehaviour Inheritance Object AutoGetMonoBehaviour Namespace : Runnex.Utilities Assembly : cs.temp.dll.dll Syntax public class AutoGetMonoBehaviour : MonoBehaviour Methods Awake() Declaration protected virtual void Awake()"
  },
  "api/Runnex.Utilities.CSVHelper.html": {
    "href": "api/Runnex.Utilities.CSVHelper.html",
    "title": "Class CSVHelper | Example Unity documentation",
    "keywords": "Class CSVHelper Inheritance Object CSVHelper Namespace : Runnex.Utilities Assembly : cs.temp.dll.dll Syntax public static class CSVHelper Methods ImportToJson(String) Declaration public static string ImportToJson(string dataCSVPath) Parameters Type Name Description String dataCSVPath Returns Type Description String"
  },
  "api/Runnex.Utilities.Editor.html": {
    "href": "api/Runnex.Utilities.Editor.html",
    "title": "Namespace Runnex.Utilities.Editor | Example Unity documentation",
    "keywords": "Namespace Runnex.Utilities.Editor Classes StringEnumDrawer"
  },
  "api/Runnex.Utilities.Editor.StringEnumDrawer.html": {
    "href": "api/Runnex.Utilities.Editor.StringEnumDrawer.html",
    "title": "Class StringEnumDrawer | Example Unity documentation",
    "keywords": "Class StringEnumDrawer Inheritance Object StringEnumDrawer Namespace : Runnex.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public class StringEnumDrawer : PropertyDrawer Methods OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/Runnex.Utilities.Example.html": {
    "href": "api/Runnex.Utilities.Example.html",
    "title": "Namespace Runnex.Utilities.Example | Example Unity documentation",
    "keywords": "Namespace Runnex.Utilities.Example Classes TestStringEnum"
  },
  "api/Runnex.Utilities.Example.TestStringEnum.html": {
    "href": "api/Runnex.Utilities.Example.TestStringEnum.html",
    "title": "Class TestStringEnum | Example Unity documentation",
    "keywords": "Class TestStringEnum Inheritance Object TestStringEnum Namespace : Runnex.Utilities.Example Assembly : cs.temp.dll.dll Syntax public class TestStringEnum : MonoBehaviour"
  },
  "api/Runnex.Utilities.Extensions.GraphicExtension.html": {
    "href": "api/Runnex.Utilities.Extensions.GraphicExtension.html",
    "title": "Class GraphicExtension | Example Unity documentation",
    "keywords": "Class GraphicExtension Inheritance Object GraphicExtension Namespace : Runnex.Utilities.Extensions Assembly : cs.temp.dll.dll Syntax public static class GraphicExtension Methods Fade(Graphic, Single, Single, Single) Declaration public static IEnumerator Fade(this Graphic graphic, float duration, float from = 0F, float to = 1F) Parameters Type Name Description Graphic graphic Single duration Single from Single to Returns Type Description System.Collections.Generic.IEnumerator"
  },
  "api/Runnex.Utilities.Extensions.html": {
    "href": "api/Runnex.Utilities.Extensions.html",
    "title": "Namespace Runnex.Utilities.Extensions | Example Unity documentation",
    "keywords": "Namespace Runnex.Utilities.Extensions Classes GraphicExtension VectorExtension Extension for Vector WebCamExtension"
  },
  "api/Runnex.Utilities.Extensions.VectorExtension.html": {
    "href": "api/Runnex.Utilities.Extensions.VectorExtension.html",
    "title": "Class VectorExtension | Example Unity documentation",
    "keywords": "Class VectorExtension Extension for Vector Inheritance Object VectorExtension Namespace : Runnex.Utilities.Extensions Assembly : cs.temp.dll.dll Syntax public static class VectorExtension Methods Clamp(Vector3, Vector3, Vector3) Clamp Vector3 Declaration public static Vector3 Clamp(this Vector3 vector, Vector3 min, Vector3 max) Parameters Type Name Description Vector3 vector vector to clamp Vector3 min min Vector3 max max Returns Type Description Vector3 Clone(Vector3) clones a Vector3 object Declaration public static Vector3 Clone(this Vector3 vector) Parameters Type Name Description Vector3 vector Returns Type Description Vector3 InverseLerp(Vector3, Vector3, Vector3) calculate the inverse linear interpolation of a vector Declaration public static float InverseLerp(this Vector3 value, Vector3 from, Vector3 to) Parameters Type Name Description Vector3 value Vector3 from Vector3 to Returns Type Description Single ToXZ(Vector3) Convert Vector3's Y to 0 This is convenient for check the distance on the XZ plane Declaration public static Vector3 ToXZ(this Vector3 vector) Parameters Type Name Description Vector3 vector Vector to Convert Returns Type Description Vector3 Vector with Y = 0"
  },
  "api/Runnex.Utilities.Extensions.WebCamExtension.html": {
    "href": "api/Runnex.Utilities.Extensions.WebCamExtension.html",
    "title": "Class WebCamExtension | Example Unity documentation",
    "keywords": "Class WebCamExtension Inheritance Object WebCamExtension Namespace : Runnex.Utilities.Extensions Assembly : cs.temp.dll.dll Syntax public static class WebCamExtension Methods CamToTexture2D(WebCamTexture) Declaration public static Texture2D CamToTexture2D(WebCamTexture webCamTexture) Parameters Type Name Description WebCamTexture webCamTexture Returns Type Description Texture2D"
  },
  "api/Runnex.Utilities.GameObjectExtension.html": {
    "href": "api/Runnex.Utilities.GameObjectExtension.html",
    "title": "Class GameObjectExtension | Example Unity documentation",
    "keywords": "Class GameObjectExtension Inheritance Object GameObjectExtension Namespace : Runnex.Utilities Assembly : cs.temp.dll.dll Syntax public static class GameObjectExtension Methods SetLayerRecursively(GameObject, Int32) Declaration public static void SetLayerRecursively(this GameObject gameObject, int layer) Parameters Type Name Description GameObject gameObject Int32 layer"
  },
  "api/Runnex.Utilities.GameViewUtils.html": {
    "href": "api/Runnex.Utilities.GameViewUtils.html",
    "title": "Class GameViewUtils | Example Unity documentation",
    "keywords": "Class GameViewUtils Inheritance Object GameViewUtils Namespace : Runnex.Utilities Assembly : cs.temp.dll.dll Syntax public static class GameViewUtils"
  },
  "api/Runnex.Utilities.html": {
    "href": "api/Runnex.Utilities.html",
    "title": "Namespace Runnex.Utilities | Example Unity documentation",
    "keywords": "Namespace Runnex.Utilities utility class Classes AutoGetAttribute AutoGetMonoBehaviour CSVHelper GameObjectExtension GameViewUtils MonoSingleton MonoSingleton<T> ObjectExtension PoseStyle RNGHelper SerializableStringEnum SerializableStringEnum<T> SharedContext holding references to shared objects ShowWhenAttribute Attribute used to show or hide the Field depending on certain conditions Singleton Singleton<T> StringEnum StringEnum<T> Timer WaitForDone Delegates StringEnum.ConversionHandler"
  },
  "api/Runnex.Utilities.MonoSingleton.html": {
    "href": "api/Runnex.Utilities.MonoSingleton.html",
    "title": "Class MonoSingleton | Example Unity documentation",
    "keywords": "Class MonoSingleton Inheritance Object MonoSingleton MonoSingleton<T> Namespace : Runnex.Utilities Assembly : cs.temp.dll.dll Syntax public abstract class MonoSingleton : MonoBehaviour Methods Destroy() Declaration public abstract void Destroy()"
  },
  "api/Runnex.Utilities.MonoSingleton-1.html": {
    "href": "api/Runnex.Utilities.MonoSingleton-1.html",
    "title": "Class MonoSingleton<T> | Example Unity documentation",
    "keywords": "Class MonoSingleton<T> Inheritance Object MonoSingleton MonoSingleton<T> Namespace : Runnex.Utilities Assembly : cs.temp.dll.dll Syntax public class MonoSingleton<T> : MonoSingleton where T : MonoBehaviour Type Parameters Name Description T Properties HasInstance Declaration public static bool HasInstance { get; } Property Value Type Description Boolean Instance Declaration public static T Instance { get; } Property Value Type Description T Methods Awake() Child class must always call base.Awake in case of overriding this will handle duplication check Declaration public virtual void Awake() Destroy() Declaration public override void Destroy() Overrides MonoSingleton.Destroy() OnDestroy() This mark quitting to prevent creating new instance when stopping the game Declaration public virtual void OnDestroy()"
  },
  "api/Runnex.Utilities.ObjectExtension.html": {
    "href": "api/Runnex.Utilities.ObjectExtension.html",
    "title": "Class ObjectExtension | Example Unity documentation",
    "keywords": "Class ObjectExtension Inheritance Object ObjectExtension Namespace : Runnex.Utilities Assembly : cs.temp.dll.dll Syntax public static class ObjectExtension Methods GetStaticProperty<T>(Type, String) Useful for getting property with private getter for testing and editor purpose Declaration public static T GetStaticProperty<T>(this Type type, string propertyName) Parameters Type Name Description Type type String propertyName Returns Type Description T Type Parameters Name Description T"
  },
  "api/Runnex.Utilities.PoseStyle.html": {
    "href": "api/Runnex.Utilities.PoseStyle.html",
    "title": "Class PoseStyle | Example Unity documentation",
    "keywords": "Class PoseStyle Inheritance Object StringEnum StringEnum < PoseStyle > PoseStyle Inherited Members StringEnum<PoseStyle>.Members StringEnum<PoseStyle>.FromString(String) StringEnum<PoseStyle>.ToString() StringEnum<PoseStyle>.AddMember(StringEnum<PoseStyle>) StringEnum.Value StringEnum.FromString(Type, String) StringEnum.RunClassConstructor(Type) StringEnum.RegisterConversionHandler(Type, StringEnum.ConversionHandler) Namespace : Runnex.Utilities Assembly : cs.temp.dll.dll Syntax public class PoseStyle : StringEnum<PoseStyle> Constructors PoseStyle(String) Declaration public PoseStyle(string id) Parameters Type Name Description String id Fields IceSkate Declaration public static PoseStyle IceSkate Field Value Type Description PoseStyle SideJump Declaration public static PoseStyle SideJump Field Value Type Description PoseStyle"
  },
  "api/Runnex.Utilities.RNGHelper.html": {
    "href": "api/Runnex.Utilities.RNGHelper.html",
    "title": "Class RNGHelper | Example Unity documentation",
    "keywords": "Class RNGHelper Inheritance Object RNGHelper Namespace : Runnex.Utilities Assembly : cs.temp.dll.dll Syntax public static class RNGHelper Methods GenerateNonRepeatRandom(Int32, Int32, Int32, Nullable<Int32>) Declaration public static List<int> GenerateNonRepeatRandom(int count, int min, int max, int? seed = null) Parameters Type Name Description Int32 count Int32 min Int32 max Nullable < Int32 > seed Returns Type Description List < Int32 >"
  },
  "api/Runnex.Utilities.SerializableStringEnum.html": {
    "href": "api/Runnex.Utilities.SerializableStringEnum.html",
    "title": "Class SerializableStringEnum | Example Unity documentation",
    "keywords": "Class SerializableStringEnum Inheritance Object SerializableStringEnum SerializableStringEnum<T> Namespace : Runnex.Utilities Assembly : cs.temp.dll.dll Syntax public abstract class SerializableStringEnum Constructors SerializableStringEnum(StringEnum) Declaration public SerializableStringEnum(StringEnum stringEnum) Parameters Type Name Description StringEnum stringEnum Fields value Declaration protected string value Field Value Type Description String Properties EnumType Declaration public abstract Type EnumType { get; } Property Value Type Description Type StringValue Declaration public string StringValue { get; } Property Value Type Description String"
  },
  "api/Runnex.Utilities.SerializableStringEnum-1.html": {
    "href": "api/Runnex.Utilities.SerializableStringEnum-1.html",
    "title": "Class SerializableStringEnum<T> | Example Unity documentation",
    "keywords": "Class SerializableStringEnum<T> Inheritance Object SerializableStringEnum SerializableStringEnum<T> Inherited Members SerializableStringEnum.StringValue SerializableStringEnum.value Namespace : Runnex.Utilities Assembly : cs.temp.dll.dll Syntax public class SerializableStringEnum<T> : SerializableStringEnum where T : StringEnum Type Parameters Name Description T Constructors SerializableStringEnum(StringEnum) Declaration public SerializableStringEnum(StringEnum stringEnum) Parameters Type Name Description StringEnum stringEnum Properties EnumType Declaration public override Type EnumType { get; } Property Value Type Description Type Overrides SerializableStringEnum.EnumType Methods Equals(Object) compare serializable/non-serializable string enum against each other there will be warning if this is not implemented Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides Object.Equals(Object) GetHashCode() get hash code there will be warning if this is not implemented Declaration public override int GetHashCode() Returns Type Description Int32 Overrides Object.GetHashCode() ToEnum() get string enum type Declaration public T ToEnum() Returns Type Description T ToString() get string value Declaration public override string ToString() Returns Type Description String Overrides Object.ToString() Operators Equality(SerializableStringEnum<T>, T) compare serializable against non-serializable string enum Declaration public static bool operator ==(SerializableStringEnum<T> serializable, T nonSerialize) Parameters Type Name Description SerializableStringEnum <T> serializable T nonSerialize Returns Type Description Boolean Inequality(SerializableStringEnum<T>, T) compare serializable against non-serializable string enum Declaration public static bool operator !=(SerializableStringEnum<T> serializable, T nonSerialize) Parameters Type Name Description SerializableStringEnum <T> serializable T nonSerialize Returns Type Description Boolean"
  },
  "api/Runnex.Utilities.SharedContext.html": {
    "href": "api/Runnex.Utilities.SharedContext.html",
    "title": "Class SharedContext | Example Unity documentation",
    "keywords": "Class SharedContext holding references to shared objects Inheritance Object Singleton Singleton < SharedContext > SharedContext Inherited Members Singleton<SharedContext>.Instance Singleton<SharedContext>.HasInstance Singleton<SharedContext>.Clear() Singleton.singletonList Singleton.ClearAllSingleton() Namespace : Runnex.Utilities Assembly : cs.temp.dll.dll Syntax public class SharedContext : Singleton<SharedContext> Constructors SharedContext() Declaration public SharedContext() Methods Add<T>(T) add object to shared context Declaration public void Add<T>(T obj) where T : class Parameters Type Name Description T obj Type Parameters Name Description T Get<T>() get object of specific type Declaration public T Get<T>() where T : class Returns Type Description T Type Parameters Name Description T Remove<T>() remove object of specific type from shared context Declaration public void Remove<T>() where T : class Type Parameters Name Description T Remove<T>(T) remove object from shared context Declaration public void Remove<T>(T obj) where T : class Parameters Type Name Description T obj Type Parameters Name Description T TryGet<T>(out T) try getting object of specific type Declaration public bool TryGet<T>(out T resultT) where T : class Parameters Type Name Description T resultT Returns Type Description Boolean Type Parameters Name Description T"
  },
  "api/Runnex.Utilities.ShowWhenAttribute.html": {
    "href": "api/Runnex.Utilities.ShowWhenAttribute.html",
    "title": "Class ShowWhenAttribute | Example Unity documentation",
    "keywords": "Class ShowWhenAttribute Attribute used to show or hide the Field depending on certain conditions Inheritance Object ShowWhenAttribute Namespace : Runnex.Utilities Assembly : cs.temp.dll.dll Syntax [AttributeUsage(AttributeTargets.Field, AllowMultiple = false, Inherited = true)] public class ShowWhenAttribute : PropertyAttribute Constructors ShowWhenAttribute(String) Attribute used to show or hide the Field depending on certain conditions Declaration public ShowWhenAttribute(string conditionFieldName) Parameters Type Name Description String conditionFieldName Name of the bool condition Field ShowWhenAttribute(String, Object) Attribute used to show or hide the Field depending on certain conditions Declaration public ShowWhenAttribute(string conditionFieldName, object comparationValue = null) Parameters Type Name Description String conditionFieldName Name of the Field to compare (bool, enum, int or float) Object comparationValue Value to compare ShowWhenAttribute(String, Object[]) Attribute used to show or hide the Field depending on certain conditions Declaration public ShowWhenAttribute(string conditionFieldName, object[] comparationValueArray = null) Parameters Type Name Description String conditionFieldName Name of the Field to compare (bool, enum, int or float) Object [] comparationValueArray Array of values to compare (only for enums) Fields comparationValue Declaration public readonly object comparationValue Field Value Type Description Object comparationValueArray Declaration public readonly object[] comparationValueArray Field Value Type Description Object [] conditionFieldName Declaration public readonly string conditionFieldName Field Value Type Description String"
  },
  "api/Runnex.Utilities.Singleton.html": {
    "href": "api/Runnex.Utilities.Singleton.html",
    "title": "Class Singleton | Example Unity documentation",
    "keywords": "Class Singleton Inheritance Object Singleton Singleton<T> Namespace : Runnex.Utilities Assembly : cs.temp.dll.dll Syntax public abstract class Singleton Fields singletonList Declaration protected static readonly List<Singleton> singletonList Field Value Type Description List < Singleton > Methods Clear() clear this singleton Declaration protected abstract void Clear() ClearAllSingleton() clear all of the singleton Declaration public static void ClearAllSingleton()"
  },
  "api/Runnex.Utilities.Singleton-1.html": {
    "href": "api/Runnex.Utilities.Singleton-1.html",
    "title": "Class Singleton<T> | Example Unity documentation",
    "keywords": "Class Singleton<T> Inheritance Object Singleton Singleton<T> SharedContext Inherited Members Singleton.singletonList Singleton.ClearAllSingleton() Namespace : Runnex.Utilities Assembly : cs.temp.dll.dll Syntax public abstract class Singleton<T> : Singleton where T : Singleton<T>, new() Type Parameters Name Description T Properties HasInstance Declaration public static bool HasInstance { get; } Property Value Type Description Boolean Instance Declaration public static T Instance { get; } Property Value Type Description T Methods Clear() Declaration protected override void Clear() Overrides Singleton.Clear()"
  },
  "api/Runnex.Utilities.StringEnum.ConversionHandler.html": {
    "href": "api/Runnex.Utilities.StringEnum.ConversionHandler.html",
    "title": "Delegate StringEnum.ConversionHandler | Example Unity documentation",
    "keywords": "Delegate StringEnum.ConversionHandler Namespace : Runnex.Utilities Assembly : cs.temp.dll.dll Syntax protected delegate StringEnum ConversionHandler(string value); Parameters Type Name Description String value Returns Type Description StringEnum"
  },
  "api/Runnex.Utilities.StringEnum.html": {
    "href": "api/Runnex.Utilities.StringEnum.html",
    "title": "Class StringEnum | Example Unity documentation",
    "keywords": "Class StringEnum Inheritance Object StringEnum StringEnum<T> Namespace : Runnex.Utilities Assembly : cs.temp.dll.dll Syntax public class StringEnum Constructors StringEnum(String) Declaration protected StringEnum(string value) Parameters Type Name Description String value Fields Value Value uniquely represent the enum Declaration public readonly string Value Field Value Type Description String Methods FromString(Type, String) Convert from string to enum object Declaration public static StringEnum FromString(Type type, string value) Parameters Type Name Description Type type String value Returns Type Description StringEnum RegisterConversionHandler(Type, StringEnum.ConversionHandler) Declaration protected static void RegisterConversionHandler(Type type, StringEnum.ConversionHandler handler) Parameters Type Name Description Type type StringEnum.ConversionHandler handler RunClassConstructor(Type) make sure static constructor got invoked. if parsing happen before any reference to the enum class, its constructor won't invoke and conversion will failed. This RunClassConstructor function is guaranteed to run the constructor only once Declaration protected static void RunClassConstructor(Type type) Parameters Type Name Description Type type"
  },
  "api/Runnex.Utilities.StringEnum-1.html": {
    "href": "api/Runnex.Utilities.StringEnum-1.html",
    "title": "Class StringEnum<T> | Example Unity documentation",
    "keywords": "Class StringEnum<T> Inheritance Object StringEnum StringEnum<T> PoseStyle Inherited Members StringEnum.Value StringEnum.FromString(Type, String) StringEnum.RunClassConstructor(Type) StringEnum.RegisterConversionHandler(Type, StringEnum.ConversionHandler) Namespace : Runnex.Utilities Assembly : cs.temp.dll.dll Syntax public class StringEnum<T> : StringEnum where T : StringEnum Type Parameters Name Description T Constructors StringEnum(String) Declaration protected StringEnum(string value) Parameters Type Name Description String value Properties Members getting members of this enum type Declaration public static IEnumerable<T> Members { get; } Property Value Type Description IEnumerable <T> Methods AddMember(StringEnum<T>) Declaration protected static void AddMember(StringEnum<T> member) Parameters Type Name Description StringEnum <T> member FromString(String) Convert from string to enum object Declaration public static T FromString(string value) Parameters Type Name Description String value Returns Type Description T ToString() To string for debug and log readability Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/Runnex.Utilities.Timer.html": {
    "href": "api/Runnex.Utilities.Timer.html",
    "title": "Class Timer | Example Unity documentation",
    "keywords": "Class Timer Inheritance Object Timer Namespace : Runnex.Utilities Assembly : cs.temp.dll.dll Syntax public class Timer Constructors Timer(Single, Action) Declaration public Timer(float duration, Action onCompleted = null) Parameters Type Name Description Single duration Action onCompleted Properties IsCompleted Declaration public bool IsCompleted { get; } Property Value Type Description Boolean IsPaused Declaration public bool IsPaused { get; } Property Value Type Description Boolean Methods GetRemainTime() Declaration public float GetRemainTime() Returns Type Description Single GetTimePass() Declaration public float GetTimePass() Returns Type Description Single Pause() Declaration public void Pause() Restart() Declaration public void Restart() Resume() Declaration public void Resume() Update() Declaration public void Update()"
  },
  "api/Runnex.Utilities.WaitForDone.html": {
    "href": "api/Runnex.Utilities.WaitForDone.html",
    "title": "Class WaitForDone | Example Unity documentation",
    "keywords": "Class WaitForDone Inheritance Object WaitForDone Namespace : Runnex.Utilities Assembly : cs.temp.dll.dll Syntax public sealed class WaitForDone : CustomYieldInstruction Constructors WaitForDone(Single, Func<Boolean>) Declaration public WaitForDone(float timeout, Func<bool> predicate) Parameters Type Name Description Single timeout Func < Boolean > predicate Properties keepWaiting Declaration public override bool keepWaiting { get; } Property Value Type Description Boolean"
  },
  "index.html": {
    "href": "index.html",
    "title": "DocFX for Unity | Example Unity documentation",
    "keywords": "DocFX for Unity DocFX usage example for Unity projects DocFX tool generates a clean documentation that looks like the Unity documentation with a manual (written in Markdown) and a scripting API (from the C# scripts of the project). This repository contains a simple Unity example project which documentation is automatically generated and deployed online: https://normanderwan.github.io/DocFxForUnity/ . It references both C# API and Unity API. DocFxForUnity documentation manual DocFxForUnity documentation scripting API Setup your documentation Install DocFX . Copy the Documentation/ folder to your Unity project: . ├── Assets + ├── Documentation ├── Package ├── ProjectSettings └── README.md Edit the following properties in Documentation/docfx.json , keep the others as it is: { \"build\": { \"globalMetadata\": // Edit your documentation website info, see: https://dotnet.github.io/docfx/tutorial/docfx.exe_user_manual.html#322-reserved-metadata { \"_appTitle\": \"Example Unity documentation\", \"_appFooter\": \"Example Unity documentation\", \"_enableSearch\": true }, \"sitemap\": { \"baseUrl\": \"https://normanderwan.github.io/DocFxForUnity\" // The URL of your documentation website } } It's the configuration file of your documentation. See https://dotnet.github.io/docfx/tutorial/docfx.exe_user_manual.html#3-docfxjson-format for more details. Edit Documentation/filterConfig.yml : apiRules: - include: # The namespaces to generate uidRegex: ^Your\\.Namespace1 type: Namespace - include: uidRegex: ^Your\\.Namespace2 type: Namespace - exclude: uidRegex: .* # Every other namespaces are ignored type: Namespace It tells DocFX which namespaces you want to generate the documentation. See https://dotnet.github.io/docfx/tutorial/howto_filter_out_unwanted_apis_attributes.html for more details. Document your classes and methods. See https://docs.microsoft.com/en-us/dotnet/csharp/codedoc for more details. (Optional) Add your manual pages: Write a Markdown file for each page in Documentation/manual/ . Keep a list of these pages on Documentation/manual/toc.yml . (Optional) Add resources such as images: Copy them to Documentation/resources/ . Reference them on your docs or manual pages. See https://dotnet.github.io/docfx/tutorial/links_and_cross_references.html#link-to-a-file-using-relative-path for more details. (Optional) Document your namespaces: For each namespace, add a Assets/Scripts/Your/Namespace1/Your.Namespace1.md file: --- uid: Your.Namespace1 summary: Description of the Your.Namespace1 namespace. --- See https://dotnet.github.io/docfx/tutorial/intro_overwrite_files.html to know how it works. Generate your documentation: On a command line opened on your project, run: cp README.md Documentation/index.md docfx Documentation/docfx.json --serve The generated website will be visible at http://localhost:8080 . If you want to have a more similar look to the Unity documentation, see this UnityFX template for DocFX: https://github.com/code-beans/UnityFX . Generate automatically your documentation If you're using GitHub: Copy the .github/workflows/documentation.yml workflow to your Unity project: . + ├── .github + | └── workflows + | └── documentation.yml ├── Assets ├── Documentation ├── Package ├── ProjectSettings └── README.md Next push on main branch will build and deploy your documentation to https://<USERNAME>.github.io/<REPOSITORY>/ ! If you're using GitLab, use the provided .gitlab-ci.yml . Generated website is pushed to a public/ directory. See the GitLab Pages documentation for more details. Troubleshooting / FAQ DocFX outputs: Warning:[ExtractMetadata]No project detected for extracting metadata. Solution: On Unity, click Asset > Open C# Project to generate the required .csproj . DocFX outputs: Warning:[ExtractMetadata]No metadata is generated for Assembly-CSharp,Assembly-CSharp-Editor. Solution: Make sure your included your namespace in Documentation/filterConfig.yml : - include: uidRegex: ^Your\\.Namespace1 type: Namespace If you want to reference a specific version of Unity, change this line on your docfx.json : \"xref\": [ \"https://normanderwan.github.io/UnityXrefMaps/<version>/xrefmap.yml\" ], where <version> is a Unity version in the form of YYYY.x ( e.g. 2017.4, 2018.4, 2019.3). Disclaimer This repository is not sponsored by or affiliated with Unity Technologies or its affiliates. “Unity” is a trademark or registered trademark of Unity Technologies or its affiliates in the U.S. and elsewhere."
  }
}